{"cells":[{"cell_type":"markdown","source":["# Classification"],"metadata":{"id":"_oK8WObQwkPl"},"id":"_oK8WObQwkPl"},{"cell_type":"markdown","id":"bb287404","metadata":{"id":"bb287404"},"source":["## Fraud Dataset - Preparation"]},{"cell_type":"code","source":["!gdown --id 18dAdG0ERdiUpKIT0VVBIhuTTwva9SsgJ # Download File"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4CmTYfcCxb4X","executionInfo":{"status":"ok","timestamp":1714180768945,"user_tz":-420,"elapsed":1404,"user":{"displayName":"Rezki Trianto","userId":"01079108557219378407"}},"outputId":"9b918de9-4e9b-407f-9e6f-a03e42b8a458"},"id":"4CmTYfcCxb4X","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/usr/local/lib/python3.10/dist-packages/gdown/__main__.py:132: FutureWarning: Option `--id` was deprecated in version 4.3.1 and will be removed in 5.0. You don't need to pass it anymore to use a file ID.\n","  warnings.warn(\n","Downloading...\n","From: https://drive.google.com/uc?id=18dAdG0ERdiUpKIT0VVBIhuTTwva9SsgJ\n","To: /content/fraud.csv\n","100% 28.9k/28.9k [00:00<00:00, 35.0MB/s]\n"]}]},{"cell_type":"code","execution_count":null,"id":"32f28797","metadata":{"ExecuteTime":{"end_time":"2022-06-11T00:38:54.101761Z","start_time":"2022-06-11T00:38:54.090883Z"},"id":"32f28797"},"outputs":[],"source":["import warnings\n","warnings.filterwarnings('ignore')"]},{"cell_type":"code","execution_count":null,"id":"50bdc9f8","metadata":{"ExecuteTime":{"end_time":"2022-06-11T00:38:55.370087Z","start_time":"2022-06-11T00:38:54.302223Z"},"id":"50bdc9f8"},"outputs":[],"source":["import pandas as pd\n","df = pd.read_csv('fraud.csv')\n","df.tail()\n","\n","X = df.drop(columns=['index', 'customerEmail', 'customerPhone', 'customerIPAddress', 'customerBillingAddress',\n","                    'Fraud', 'Fraud_Decoded', 'customerDevice'])\n","y = df['Fraud_Decoded']\n","\n","from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)"]},{"cell_type":"code","execution_count":null,"id":"24dd5074","metadata":{"ExecuteTime":{"end_time":"2022-06-11T00:38:55.374996Z","start_time":"2022-06-11T00:38:55.371224Z"},"id":"24dd5074"},"outputs":[],"source":["from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score\n","from sklearn.model_selection import cross_validate\n","from sklearn.ensemble import RandomForestClassifier\n","\n","def eval_classification(model):\n","    y_pred = model.predict(X_test)\n","    y_pred_train = model.predict(X_train)\n","    y_pred_proba = model.predict_proba(X_test)\n","    y_pred_proba_train = model.predict_proba(X_train)\n","\n","    print(\"Accuracy (Test Set): %.2f\" % accuracy_score(y_test, y_pred))\n","    print(\"Accuracy (Train Set): %.2f\" % accuracy_score(y_train, y_pred_train))\n","    print(\"Precision (Test Set): %.2f\" % precision_score(y_test, y_pred))\n","    print(\"Recall (Test Set): %.2f\" % recall_score(y_test, y_pred))\n","    print(\"F1-Score (Test Set): %.2f\" % f1_score(y_test, y_pred))\n","\n","    print(\"roc_auc (test-proba): %.2f\" % roc_auc_score(y_test, y_pred_proba[:, 1]))\n","    print(\"roc_auc (train-proba): %.2f\" % roc_auc_score(y_train, y_pred_proba_train[:, 1]))\n","    #\n","    score = cross_validate(model, X, y, cv=5, scoring='recall', return_train_score=True)\n","    print('recall (crossval train): '+ str(score['train_score'].mean()))\n","    print('recall (crossval test): '+ str(score['test_score'].mean()))\n","\n","def show_feature_importance(model):\n","    feat_importances = pd.Series(model.feature_importances_, index=X.columns)\n","    ax = feat_importances.nlargest(25).plot(kind='barh', figsize=(10, 8))\n","    ax.invert_yaxis()\n","\n","    plt.xlabel('score')\n","    plt.ylabel('feature')\n","    plt.title('feature importance score')\n","\n","def show_best_hyperparameter(model):\n","    print(model.best_estimator_.get_params())"]},{"cell_type":"code","execution_count":null,"id":"0f97b35e","metadata":{"ExecuteTime":{"end_time":"2022-06-11T00:40:57.139198Z","start_time":"2022-06-11T00:40:57.125054Z"},"id":"0f97b35e"},"outputs":[],"source":["import numpy as np\n","from matplotlib import pyplot as plt\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.tree import DecisionTreeClassifier\n","\n","def draw_learning_curve(param_values):\n","    train_scores = []\n","    test_scores = []\n","\n","    for c in param_values:\n","        model = LogisticRegression(penalty='l2', C=c)\n","        model.fit(X_train, y_train)\n","\n","        # eval on train\n","        y_pred_train_proba = model.predict_proba(X_train)\n","        train_auc = roc_auc_score(y_train, y_pred_train_proba[:,1])\n","        train_scores.append(train_auc)\n","\n","        # eval on test\n","        y_pred_proba = model.predict_proba(X_test)\n","        test_auc = roc_auc_score(y_test, y_pred_proba[:,1])\n","        test_scores.append(test_auc)\n","\n","        print('param value: ' + str(c) + '; train: ' + str(train_auc) + '; test: '+ str(test_auc))\n","\n","    plt.plot(param_values, train_scores, label='Train')\n","    plt.plot(param_values, test_scores, label='Test')\n","    plt.xlabel('C')\n","    plt.ylabel('AUC')\n","    plt.title('Learning Curve - Hyperparameter C - Logistic Regression')\n","    plt.legend()\n","    plt.show()"]},{"cell_type":"code","execution_count":null,"id":"4c38ab47","metadata":{"ExecuteTime":{"end_time":"2022-06-11T00:38:55.858464Z","start_time":"2022-06-11T00:38:55.837196Z"},"colab":{"base_uri":"https://localhost:8080/"},"id":"4c38ab47","executionInfo":{"status":"ok","timestamp":1690541107238,"user_tz":-420,"elapsed":346,"user":{"displayName":"Rahmat Hidayat","userId":"12938656148379161257"}},"outputId":"cdc1e27c-454b-4b4b-e389-f81f4a4f0bc1"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    0.608392\n","1    0.391608\n","Name: Fraud_Decoded, dtype: float64"]},"metadata":{},"execution_count":6}],"source":["df.Fraud_Decoded.value_counts(normalize=True)"]},{"cell_type":"markdown","id":"602a8356","metadata":{"id":"602a8356"},"source":["<br/><br/><br/>\n","\n","\n","---\n","## Logistic Regression\n","sklearn Documentation: https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html"]},{"cell_type":"markdown","source":["### Fit Model"],"metadata":{"id":"LE4Afb5uxOO5"},"id":"LE4Afb5uxOO5"},{"cell_type":"code","source":["from sklearn.linear_model import LogisticRegression # import logistic regression dari sklearn\n","logreg = LogisticRegression() # inisiasi object dengan nama logreg\n","logreg.fit(X_train, y_train) # fit model classification dari data train\n","eval_classification(logreg)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YnMzdSW791qU","executionInfo":{"status":"ok","timestamp":1714180841822,"user_tz":-420,"elapsed":453,"user":{"displayName":"Rezki Trianto","userId":"01079108557219378407"}},"outputId":"e41ca079-7a82-4072-af4d-b8ca6c792997"},"id":"YnMzdSW791qU","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy (Test Set): 0.70\n","Precision (Test Set): 0.56\n","Recall (Test Set): 0.67\n","F1-Score (Test Set): 0.61\n","roc_auc (test-proba): 0.80\n","roc_auc (train-proba): 0.93\n","recall (crossval train): 0.7097979797979799\n","recall (crossval test): 0.5712121212121212\n"]}]},{"cell_type":"markdown","source":["### Hyperparameter Tuning\n","<b>Hyperparameter yang biasa di tuning pada Logistic Regression:</b> https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html\n","- C: nilai regularization\n","- penalty: menggukanan l2 norm (ridge), l1 (lasso), atau elastic net\n","- solver: metode bagaimana kita melakukan update pada variable di logistic regression (slope/intercept): liblinear bagus jika data sedikit; sag & saga bagus jika data besar (karena menggunakan metode sampling)"],"metadata":{"id":"O-lHAW-8xPvP"},"id":"O-lHAW-8xPvP"},{"cell_type":"code","source":["from sklearn.model_selection import RandomizedSearchCV\n","\n","penalty = ['l1', 'l2']\n","C = [float(x) for x in np.linspace(0.0001, 0.05, 100)]\n","hyperparameters = dict(penalty=penalty, C=C)\n","\n","logreg = LogisticRegression()\n","rs = RandomizedSearchCV(logreg, hyperparameters, scoring='roc_auc', random_state=1, cv=5, n_iter=50)\n","rs.fit(X_train, y_train)\n","eval_classification(rs)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"I0_woU-6ONFw","executionInfo":{"status":"ok","timestamp":1664681970438,"user_tz":-420,"elapsed":2194,"user":{"displayName":"Rezki Trianto","userId":"01079108557219378407"}},"outputId":"75b4774d-ca51-4e1d-da58-8f16f14e443d"},"id":"I0_woU-6ONFw","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy (Test Set): 0.81\n","Precision (Test Set): 0.77\n","Recall (Test Set): 0.67\n","F1-Score (Test Set): 0.71\n","roc_auc (test-proba): 0.85\n","roc_auc (train-proba): 0.87\n","roc_auc (crossval train): 0.8650882949578602\n","roc_auc (crossval test): 0.7862745098039214\n"]}]},{"cell_type":"markdown","source":["### Check the best hyperparameter after tuning"],"metadata":{"id":"EU1-zbj8xVpP"},"id":"EU1-zbj8xVpP"},{"cell_type":"code","source":["show_best_hyperparameter(rs)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LDrUNFLkSG81","executionInfo":{"status":"ok","timestamp":1664190759511,"user_tz":-420,"elapsed":8,"user":{"displayName":"Rezki Trianto","userId":"01079108557219378407"}},"outputId":"f6eae1f9-b911-45ce-92bb-ad126a91ed32"},"id":"LDrUNFLkSG81","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'C': 0.023789898989898993, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 100, 'multi_class': 'auto', 'n_jobs': None, 'penalty': 'l2', 'random_state': None, 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}\n"]}]},{"cell_type":"markdown","source":["### Feature Importance"],"metadata":{"id":"SoZ8a18NxZie"},"id":"SoZ8a18NxZie"},{"cell_type":"code","source":["X.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"s19oWVpxS83o","executionInfo":{"status":"ok","timestamp":1664190759511,"user_tz":-420,"elapsed":7,"user":{"displayName":"Rezki Trianto","userId":"01079108557219378407"}},"outputId":"c92c3d9f-3afa-49fe-a577-1477dea26528"},"id":"s19oWVpxS83o","execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['No_Transactions', 'No_Orders', 'No_Payments', 'Total_transaction_amt',\n","       'No_transactionsFail', 'PaymentRegFail', 'PaypalPayments',\n","       'ApplePayments', 'CardPayments', 'BitcoinPayments', 'OrdersFulfilled',\n","       'OrdersPending', 'OrdersFailed', 'JCB_16', 'AmericanExp', 'VISA_16',\n","       'Discover', 'Voyager', 'VISA_13', 'Maestro', 'Mastercard', 'DC_CB',\n","       'JCB_15', 'Trns_fail_order_fulfilled', 'Duplicate_IP',\n","       'Duplicate_Address'],\n","      dtype='object')"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["rs.best_estimator_.coef_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6_gw34OuSpZW","executionInfo":{"status":"ok","timestamp":1664190759511,"user_tz":-420,"elapsed":6,"user":{"displayName":"Rezki Trianto","userId":"01079108557219378407"}},"outputId":"8a87f6cc-7431-43ef-b8cb-208d64aaa607"},"id":"6_gw34OuSpZW","execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[-0.16183251, -0.06533588,  0.28880714,  0.01195476, -0.07680987,\n","        -0.06659543, -0.11060383, -0.03573747, -0.04360141,  0.02301198,\n","        -0.05168385, -0.05565604, -0.05959084, -0.05361382, -0.07017717,\n","         0.07321701,  0.00083904,  0.09697976,  0.06992801, -0.08304966,\n","        -0.05623632, -0.08145988, -0.06335768, -0.02205935,  0.05750637,\n","         0.05971833]])"]},"metadata":{},"execution_count":13}]},{"cell_type":"markdown","source":["### Learning Curve"],"metadata":{"id":"0V11IHfLxcQv"},"id":"0V11IHfLxcQv"},{"cell_type":"code","source":["# learning curve\n","import numpy as np\n","param_values = [float(x) for x in np.linspace(0.0001, 0.03, 100)]\n","draw_learning_curve(param_values)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"6PkgtA-WPKmr","executionInfo":{"status":"ok","timestamp":1664190887202,"user_tz":-420,"elapsed":7031,"user":{"displayName":"Rezki Trianto","userId":"01079108557219378407"}},"outputId":"f143c984-0b9a-483a-aff2-ac50fa08058e"},"id":"6PkgtA-WPKmr","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["param value: 0.0001; train: 0.6448945845390657; test: 0.8119047619047619\n","param value: 0.0006040404040404041; train: 0.6779661016949153; test: 0.819047619047619\n","param value: 0.0011080808080808082; train: 0.7048367093840431; test: 0.8261904761904761\n","param value: 0.0016121212121212123; train: 0.725919801570897; test: 0.8357142857142857\n","param value: 0.002116161616161616; train: 0.7412153782554776; test: 0.8404761904761905\n","param value: 0.0026202020202020205; train: 0.7536171971889211; test: 0.85\n","param value: 0.0031242424242424243; train: 0.7643654402645722; test: 0.8547619047619048\n","param value: 0.003628282828282828; train: 0.7701529557668457; test: 0.8571428571428571\n","param value: 0.004132323232323233; train: 0.7771806531624638; test: 0.8642857142857143\n","param value: 0.004636363636363637; train: 0.7829681686647375; test: 0.8642857142857143\n","param value: 0.0051404040404040416; train: 0.7924762298470442; test: 0.8690476190476191\n","param value: 0.005644444444444445; train: 0.7995039272426623; test: 0.8714285714285714\n","param value: 0.006148484848484849; train: 0.8069450186027284; test: 0.8666666666666667\n","param value: 0.006652525252525254; train: 0.812319140140554; test: 0.8666666666666667\n","param value: 0.007156565656565657; train: 0.8172798677139314; test: 0.8642857142857143\n","param value: 0.007660606060606061; train: 0.8222405952873089; test: 0.8642857142857143\n","param value: 0.008164646464646465; train: 0.8280281107895825; test: 0.8642857142857143\n","param value: 0.008668686868686869; train: 0.8280281107895825; test: 0.8642857142857143\n","param value: 0.009172727272727273; train: 0.8305084745762712; test: 0.8666666666666667\n","param value: 0.009676767676767678; train: 0.8321620504340638; test: 0.8642857142857143\n","param value: 0.010180808080808082; train: 0.8350558081852005; test: 0.8642857142857143\n","param value: 0.010684848484848485; train: 0.8358825961140968; test: 0.8666666666666667\n","param value: 0.011188888888888889; train: 0.8391897478296817; test: 0.8666666666666667\n","param value: 0.011692929292929293; train: 0.840429929723026; test: 0.8666666666666667\n","param value: 0.012196969696969697; train: 0.8437370814386109; test: 0.8690476190476191\n","param value: 0.012701010101010102; train: 0.8453906572964035; test: 0.8690476190476191\n","param value: 0.013205050505050506; train: 0.847044233154196; test: 0.8690476190476191\n","param value: 0.01370909090909091; train: 0.8499379909053328; test: 0.8714285714285714\n","param value: 0.014213131313131313; train: 0.8499379909053328; test: 0.8690476190476191\n","param value: 0.014717171717171717; train: 0.8511781727986771; test: 0.8714285714285714\n","param value: 0.015221212121212122; train: 0.8524183546920215; test: 0.8690476190476191\n","param value: 0.015725252525252528; train: 0.8536585365853658; test: 0.8690476190476191\n","param value: 0.01622929292929293; train: 0.8548987184787101; test: 0.8666666666666667\n","param value: 0.016733333333333333; train: 0.8553121124431583; test: 0.8642857142857143\n","param value: 0.01723737373737374; train: 0.857792476229847; test: 0.8642857142857143\n","param value: 0.01774141414141414; train: 0.8598594460520878; test: 0.861904761904762\n","param value: 0.018245454545454547; train: 0.8615130219098801; test: 0.861904761904762\n","param value: 0.01874949494949495; train: 0.8623398098387764; test: 0.8595238095238096\n","param value: 0.019253535353535356; train: 0.8635799917321207; test: 0.861904761904762\n","param value: 0.01975757575757576; train: 0.864820173625465; test: 0.861904761904762\n","param value: 0.020261616161616165; train: 0.8668871434477057; test: 0.8595238095238096\n","param value: 0.020765656565656567; train: 0.8668871434477057; test: 0.8547619047619048\n","param value: 0.02126969696969697; train: 0.8673005374121538; test: 0.8571428571428572\n","param value: 0.021773737373737376; train: 0.8685407193054981; test: 0.8571428571428572\n","param value: 0.02227777777777778; train: 0.8693675072343944; test: 0.8571428571428572\n","param value: 0.022781818181818184; train: 0.8710210830921868; test: 0.8571428571428572\n","param value: 0.023285858585858587; train: 0.8710210830921868; test: 0.8547619047619047\n","param value: 0.023789898989898993; train: 0.8710210830921868; test: 0.85\n","param value: 0.024293939393939395; train: 0.8718478710210831; test: 0.8523809523809524\n","param value: 0.024797979797979798; train: 0.8722612649855311; test: 0.8523809523809524\n","param value: 0.025302020202020204; train: 0.8730880529144274; test: 0.85\n","param value: 0.025806060606060607; train: 0.875155022736668; test: 0.8476190476190476\n","param value: 0.026310101010101013; train: 0.8755684167011162; test: 0.8476190476190476\n","param value: 0.026814141414141415; train: 0.8763952046300124; test: 0.8476190476190476\n","param value: 0.02731818181818182; train: 0.8792889623811493; test: 0.8476190476190476\n","param value: 0.027822222222222224; train: 0.8805291442744936; test: 0.8476190476190476\n","param value: 0.028326262626262626; train: 0.8797023563455973; test: 0.8476190476190476\n","param value: 0.028830303030303032; train: 0.882182720132286; test: 0.8476190476190476\n","param value: 0.029334343434343435; train: 0.882182720132286; test: 0.8476190476190476\n","param value: 0.02983838383838384; train: 0.8830095080611823; test: 0.8476190476190476\n","param value: 0.030342424242424244; train: 0.8830095080611823; test: 0.8476190476190476\n","param value: 0.03084646464646465; train: 0.8825961140967342; test: 0.8452380952380952\n","param value: 0.03135050505050506; train: 0.8834229020256305; test: 0.8452380952380952\n","param value: 0.03185454545454546; train: 0.8834229020256303; test: 0.8452380952380952\n","param value: 0.032358585858585864; train: 0.8842496899545267; test: 0.8452380952380952\n","param value: 0.03286262626262627; train: 0.8863166597767673; test: 0.8428571428571429\n","param value: 0.03336666666666667; train: 0.8871434477056634; test: 0.8428571428571429\n","param value: 0.03387070707070708; train: 0.8879702356345598; test: 0.8428571428571429\n","param value: 0.03437474747474748; train: 0.8879702356345598; test: 0.8428571428571429\n","param value: 0.034878787878787884; train: 0.8887970235634559; test: 0.8404761904761905\n","param value: 0.03538282828282829; train: 0.8892104175279041; test: 0.8404761904761905\n","param value: 0.035886868686868696; train: 0.8904505994212484; test: 0.8404761904761905\n","param value: 0.0363909090909091; train: 0.8912773873501447; test: 0.8404761904761905\n","param value: 0.0368949494949495; train: 0.8908639933856966; test: 0.8404761904761905\n","param value: 0.037398989898989904; train: 0.8916907813145928; test: 0.8380952380952381\n","param value: 0.037903030303030306; train: 0.892104175279041; test: 0.8380952380952381\n","param value: 0.038407070707070716; train: 0.8941711451012815; test: 0.8357142857142857\n","param value: 0.03891111111111112; train: 0.8945845390657295; test: 0.8357142857142857\n","param value: 0.03941515151515152; train: 0.8933443571723853; test: 0.8357142857142857\n","param value: 0.039919191919191924; train: 0.8937577511368333; test: 0.8357142857142857\n","param value: 0.04042323232323233; train: 0.8941711451012815; test: 0.8357142857142857\n","param value: 0.040927272727272736; train: 0.8958247209590741; test: 0.8357142857142857\n","param value: 0.04143131313131314; train: 0.8954113269946259; test: 0.8357142857142857\n","param value: 0.04193535353535354; train: 0.8954113269946259; test: 0.8357142857142857\n","param value: 0.04243939393939394; train: 0.8949979330301777; test: 0.8357142857142857\n","param value: 0.04294343434343435; train: 0.8966515088879702; test: 0.8357142857142857\n","param value: 0.043447474747474756; train: 0.8962381149235221; test: 0.8357142857142857\n","param value: 0.04395151515151516; train: 0.8983050847457626; test: 0.8380952380952381\n","param value: 0.04445555555555556; train: 0.8978916907813146; test: 0.8357142857142857\n","param value: 0.04495959595959596; train: 0.8970649028524184; test: 0.8357142857142857\n","param value: 0.04546363636363637; train: 0.8970649028524184; test: 0.8357142857142857\n","param value: 0.045967676767676775; train: 0.8970649028524184; test: 0.8357142857142857\n","param value: 0.04647171717171718; train: 0.8978916907813146; test: 0.8333333333333334\n","param value: 0.04697575757575758; train: 0.8978916907813146; test: 0.8333333333333334\n","param value: 0.04747979797979799; train: 0.8983050847457626; test: 0.8333333333333334\n","param value: 0.04798383838383839; train: 0.9011988424968995; test: 0.8333333333333334\n","param value: 0.048487878787878795; train: 0.8978916907813146; test: 0.8380952380952381\n","param value: 0.0489919191919192; train: 0.899545266639107; test: 0.8333333333333334\n","param value: 0.0494959595959596; train: 0.899131872674659; test: 0.8357142857142857\n","param value: 0.05; train: 0.899131872674659; test: 0.8333333333333334\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["<br/><br/><br/>\n","\n","\n","---\n","## k-Nearest Neighbor\n","sklearn documentation: https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html"],"metadata":{"id":"GP7zu3ljxiBB"},"id":"GP7zu3ljxiBB"},{"cell_type":"markdown","source":["### Fit Model"],"metadata":{"id":"RveJaoTxxo_X"},"id":"RveJaoTxxo_X"},{"cell_type":"code","source":["# knn\n","from sklearn.neighbors import KNeighborsClassifier # import knn dari sklearn\n","knn = KNeighborsClassifier() # inisiasi object dengan nama knn\n","knn.fit(X_train, y_train) # fit model KNN dari data train\n","eval_classification(knn)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qDMs5NDuSmL2","executionInfo":{"status":"ok","timestamp":1664681974053,"user_tz":-420,"elapsed":711,"user":{"displayName":"Rezki Trianto","userId":"01079108557219378407"}},"outputId":"ca226947-ee3c-4d65-8606-09aac311b039"},"id":"qDMs5NDuSmL2","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy (Test Set): 0.79\n","Precision (Test Set): 0.75\n","Recall (Test Set): 0.60\n","F1-Score (Test Set): 0.67\n","roc_auc (test-proba): 0.70\n","roc_auc (train-proba): 0.80\n","roc_auc (crossval train): 0.8433312420268942\n","roc_auc (crossval test): 0.7007724301841949\n"]}]},{"cell_type":"markdown","source":["### Hyperparameter Tuning\n","<b>Hyperparameter yang biasa di tuning pada kNN:</b> (https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html)\n","- n_neighbors: jumlah tetangga yang kita lihat\n","- weights: jika menggunakan pembobotan pada kNN. pembobotan bisa berdasarkan jarak (i.e. semakin dekat jaraknya semakin besar bobotnya)\n","- algorithm: berbagai macam algoritma yang kita gunakan untuk menghitung jarak dan membandingkan jarak satu dengan yang lainnya (brute, kd_tree, ball_tree, etc.)\n","    - leaf_size: digunakan jika kita menggunakan algoritma kd_tree saja. membandingkan jarak dengan pendekatan tree based algorithm\n","- p: cara menghitung jarak antar data point. 1 untuk manhattan distance, 2 untuk euclidean distance, >2 untuk minkowski distance"],"metadata":{"id":"3mqhYS7exyWk"},"id":"3mqhYS7exyWk"},{"cell_type":"code","source":["from sklearn.model_selection import RandomizedSearchCV\n","\n","n_neighbors = list(range(1,30))\n","p=[1,2]\n","algorithm = ['auto', 'ball_tree', 'kd_tree', 'brute']\n","hyperparameters = dict(n_neighbors=n_neighbors, p=p, algorithm=algorithm)\n","\n","knn.fit(X_train, y_train)\n","rs = RandomizedSearchCV(knn, hyperparameters, scoring='roc_auc', random_state=1, cv=5)\n","rs.fit(X_train, y_train)\n","eval_classification(rs)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DPOqQarcWUwm","executionInfo":{"status":"ok","timestamp":1664682042825,"user_tz":-420,"elapsed":2899,"user":{"displayName":"Rezki Trianto","userId":"01079108557219378407"}},"outputId":"62d39c23-d793-4926-e726-7e633481febf"},"id":"DPOqQarcWUwm","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy (Test Set): 0.81\n","Precision (Test Set): 0.77\n","Recall (Test Set): 0.67\n","F1-Score (Test Set): 0.71\n","roc_auc (test-proba): 0.81\n","roc_auc (train-proba): 0.88\n","roc_auc (crossval train): 0.7966098563272477\n","roc_auc (crossval test): 0.6896167557932263\n"]}]},{"cell_type":"code","source":["# Analyzing Learning Curve\n","import numpy as np\n","from matplotlib import pyplot as plt\n","from sklearn.neighbors import KNeighborsClassifier\n","\n","def draw_learning_curve(param_values):\n","    train_scores = []\n","    test_scores = []\n","\n","    for i in param_values:\n","        model = KNeighborsClassifier(n_neighbors=i)\n","        model.fit(X_train, y_train)\n","\n","        # eval on train\n","        y_pred_train_proba = model.predict_proba(X_train)\n","        train_auc = roc_auc_score(y_train, y_pred_train_proba[:,1])\n","        train_scores.append(train_auc)\n","\n","        # eval on test\n","        y_pred_proba = model.predict_proba(X_test)\n","        test_auc = roc_auc_score(y_test, y_pred_proba[:,1])\n","        test_scores.append(test_auc)\n","\n","        print('param value: ' + str(i) + '; train: ' + str(train_auc) + '; test: '+ str(test_auc))\n","\n","    plt.plot(param_values, train_scores, label='Train')\n","    plt.plot(param_values, test_scores, label='Test')\n","    plt.xlabel('k')\n","    plt.ylabel('AUC')\n","    plt.title('Learning Curve')\n","    plt.legend()\n","    plt.show()\n","\n","param_values = [int(x) for x in np.linspace(1, 100, 100)]\n","draw_learning_curve(param_values)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"C4f3yePwd3Y3","executionInfo":{"status":"ok","timestamp":1664693549341,"user_tz":-420,"elapsed":3069,"user":{"displayName":"Rezki Trianto","userId":"01079108557219378407"}},"outputId":"73524cfe-70c5-4abc-9f6a-e0691f482a98"},"id":"C4f3yePwd3Y3","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["param value: 1; train: 1.0; test: 0.7571428571428572\n","param value: 2; train: 0.941091360066143; test: 0.7738095238095238\n","param value: 3; train: 0.8759818106655644; test: 0.7357142857142858\n","param value: 4; train: 0.8150062009094667; test: 0.7523809523809524\n","param value: 5; train: 0.8028110789582472; test: 0.7035714285714286\n","param value: 6; train: 0.7726333195535346; test: 0.7321428571428571\n","param value: 7; train: 0.7608515915667631; test: 0.7416666666666667\n","param value: 8; train: 0.7441091360066142; test: 0.7142857142857143\n","param value: 9; train: 0.7350144687887556; test: 0.7416666666666667\n","param value: 10; train: 0.7443158329888383; test: 0.7380952380952381\n","param value: 11; train: 0.7143447705663498; test: 0.7571428571428571\n","param value: 12; train: 0.6953286482017362; test: 0.7571428571428571\n","param value: 13; train: 0.6893344357172385; test: 0.7511904761904763\n","param value: 14; train: 0.694708557255064; test: 0.736904761904762\n","param value: 15; train: 0.6789995866060354; test: 0.754761904761905\n","param value: 16; train: 0.693881769326168; test: 0.7488095238095238\n","param value: 17; train: 0.722199255890864; test: 0.7476190476190476\n","param value: 18; train: 0.7498966515088881; test: 0.7416666666666667\n","param value: 19; train: 0.7420421661843737; test: 0.7654761904761905\n","param value: 20; train: 0.7242662257131046; test: 0.7607142857142857\n","param value: 21; train: 0.7199255890863994; test: 0.7809523809523808\n","param value: 22; train: 0.7271599834642415; test: 0.7714285714285714\n","param value: 23; train: 0.7081438610996281; test: 0.8095238095238095\n","param value: 24; train: 0.7100041339396445; test: 0.7952380952380952\n","param value: 25; train: 0.7284001653575857; test: 0.7797619047619048\n","param value: 26; train: 0.7015295576684579; test: 0.811904761904762\n","param value: 27; train: 0.7112443158329889; test: 0.7714285714285714\n","param value: 28; train: 0.6849937990905333; test: 0.7880952380952381\n","param value: 29; train: 0.6771393137660189; test: 0.7773809523809523\n","param value: 30; train: 0.6546093427035965; test: 0.7880952380952381\n","param value: 31; train: 0.6453079785035138; test: 0.7440476190476192\n","param value: 32; train: 0.6326994625878464; test: 0.775\n","param value: 33; train: 0.6341463414634146; test: 0.7773809523809523\n","param value: 34; train: 0.6318726746589499; test: 0.7535714285714286\n","param value: 35; train: 0.6500620090946672; test: 0.7511904761904762\n","param value: 36; train: 0.6546093427035966; test: 0.7595238095238096\n","param value: 37; train: 0.652955766845804; test: 0.7595238095238095\n","param value: 38; train: 0.6709384042992973; test: 0.7428571428571429\n","param value: 39; train: 0.697602315006201; test: 0.7178571428571429\n","param value: 40; train: 0.6959487391484084; test: 0.7357142857142857\n","param value: 41; train: 0.704836709384043; test: 0.7738095238095237\n","param value: 42; train: 0.6951219512195121; test: 0.7678571428571428\n","param value: 43; train: 0.7002893757751136; test: 0.8214285714285714\n","param value: 44; train: 0.6823067383216205; test: 0.817857142857143\n","param value: 45; train: 0.6603968582058702; test: 0.7797619047619048\n","param value: 46; train: 0.6440677966101696; test: 0.7821428571428571\n","param value: 47; train: 0.6467548573790823; test: 0.8047619047619048\n","param value: 48; train: 0.6165770979743695; test: 0.8095238095238095\n","param value: 49; train: 0.6047953699875983; test: 0.7726190476190476\n","param value: 50; train: 0.6215378255477471; test: 0.7845238095238095\n","param value: 51; train: 0.6021083092186854; test: 0.7821428571428573\n","param value: 52; train: 0.6300124018189335; test: 0.7738095238095238\n","param value: 53; train: 0.6380735841256717; test: 0.780952380952381\n","param value: 54; train: 0.6002480363786689; test: 0.7964285714285715\n","param value: 55; train: 0.6054154609342703; test: 0.7964285714285714\n","param value: 56; train: 0.6314592806945019; test: 0.8\n","param value: 57; train: 0.6300124018189335; test: 0.7916666666666666\n","param value: 58; train: 0.6329061595700702; test: 0.7928571428571428\n","param value: 59; train: 0.6267052501033484; test: 0.7809523809523808\n","param value: 60; train: 0.635386523356759; test: 0.7714285714285715\n","param value: 61; train: 0.6062422488631667; test: 0.7714285714285715\n","param value: 62; train: 0.6192641587432824; test: 0.8011904761904761\n","param value: 63; train: 0.6374534931789996; test: 0.8166666666666668\n","param value: 64; train: 0.6291856138900371; test: 0.8119047619047618\n","param value: 65; train: 0.6167837949565935; test: 0.7928571428571428\n","param value: 66; train: 0.6324927656056221; test: 0.8154761904761905\n","param value: 67; train: 0.6395204630012402; test: 0.7988095238095237\n","param value: 68; train: 0.6403472509301366; test: 0.817857142857143\n","param value: 69; train: 0.6444811905746177; test: 0.7976190476190476\n","param value: 70; train: 0.617817279867714; test: 0.807142857142857\n","param value: 71; train: 0.6351798263745351; test: 0.8023809523809523\n","param value: 72; train: 0.6194708557255063; test: 0.807142857142857\n","param value: 73; train: 0.6258784621744522; test: 0.8202380952380952\n","param value: 74; train: 0.6225713104588673; test: 0.8261904761904761\n","param value: 75; train: 0.6490285241835468; test: 0.8\n","param value: 76; train: 0.6409673418768086; test: 0.7904761904761904\n","param value: 77; train: 0.6500620090946673; test: 0.8071428571428572\n","param value: 78; train: 0.6552294336502688; test: 0.805952380952381\n","param value: 79; train: 0.656056221579165; test: 0.7642857142857142\n","param value: 80; train: 0.6486151302190988; test: 0.7761904761904761\n","param value: 81; train: 0.6488218272013229; test: 0.7607142857142858\n","param value: 82; train: 0.6500620090946673; test: 0.7845238095238095\n","param value: 83; train: 0.6603968582058702; test: 0.8142857142857143\n","param value: 84; train: 0.6500620090946673; test: 0.8071428571428572\n","param value: 85; train: 0.6568830095080611; test: 0.8261904761904763\n","param value: 86; train: 0.656262918561389; test: 0.7785714285714287\n","param value: 87; train: 0.6457213724679619; test: 0.7857142857142857\n","param value: 88; train: 0.6519222819346837; test: 0.7857142857142857\n","param value: 89; train: 0.6393137660190161; test: 0.8\n","param value: 90; train: 0.6395204630012402; test: 0.8142857142857143\n","param value: 91; train: 0.6281521289789169; test: 0.7523809523809524\n","param value: 92; train: 0.6273253410500207; test: 0.7666666666666666\n","param value: 93; train: 0.5975609756097561; test: 0.6333333333333333\n","param value: 94; train: 0.5975609756097561; test: 0.6333333333333333\n","param value: 95; train: 0.5975609756097561; test: 0.6333333333333333\n","param value: 96; train: 0.5975609756097561; test: 0.6333333333333333\n","param value: 97; train: 0.5975609756097561; test: 0.6333333333333333\n","param value: 98; train: 0.5; test: 0.5\n","param value: 99; train: 0.5; test: 0.5\n","param value: 100; train: 0.5; test: 0.5\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["<br/><br/><br/>\n","\n","\n","---\n","## Decision Tree\n","sklearn documentation: https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html#sklearn.tree.DecisionTreeClassifier"],"metadata":{"id":"l5uihQPIx7TE"},"id":"l5uihQPIx7TE"},{"cell_type":"markdown","source":["### Fit Model"],"metadata":{"id":"VDCBTBJcyUPK"},"id":"VDCBTBJcyUPK"},{"cell_type":"code","source":["# decision tree\n","from sklearn.tree import DecisionTreeClassifier # import decision tree dari sklearn\n","dt = DecisionTreeClassifier() # inisiasi object dengan nama dt\n","dt.fit(X_train, y_train) # fit model decision tree dari data train\n","eval_classification(dt)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rGkjnEhcXheR","executionInfo":{"status":"ok","timestamp":1664682094225,"user_tz":-420,"elapsed":4,"user":{"displayName":"Rezki Trianto","userId":"01079108557219378407"}},"outputId":"bcf4978a-6e67-4790-d70d-1bd9ba661e3e"},"id":"rGkjnEhcXheR","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy (Test Set): 0.65\n","Precision (Test Set): 0.50\n","Recall (Test Set): 0.53\n","F1-Score (Test Set): 0.52\n","roc_auc (test-proba): 0.62\n","roc_auc (train-proba): 1.00\n","roc_auc (crossval train): 1.0\n","roc_auc (crossval test): 0.6755793226381461\n"]}]},{"cell_type":"markdown","source":["### Hyperparameter Tuning\n","<b>Hyperparameter yang biasa di tuning pada Decision Tree:</b> (https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html#sklearn.tree.DecisionTreeClassifier)\n","- criterion: cara menghitung impurity pada feature (gini, entropy). melihat feature mana yang menjadi root/node\n","- max_depth: maksimal kedalaman tree untuk mencegah overfitting\n","- min_sample_split: berapa jumlah sample yg dibutuhkan pada node untuk membuat leaf baru (agar tidak terlalu sedikit sehingga mengakibatkan overfit)\n","- min_sample_leaf: berapa jumlah sample yg dibutuhkan pada leaf agar leaf terbentuk (agar tidak terlalu sedikit sehingga mengakibatkan overfit)\n","- ccp_alpha: jika cost/error dari sebuah leaf/subtree lebih besar daripada ccp_alpha, subtree tersebut akan kita hapus/prune sehingga meminimalisir error/variance dari model\n","- splitter: bagaimana kita memilih feature untuk dilakukan split, dan apakah ada jumlah batasan feature yang akan di split tersebut"],"metadata":{"id":"qOYI8S8TyQcD"},"id":"qOYI8S8TyQcD"},{"cell_type":"code","source":["from sklearn.model_selection import RandomizedSearchCV, GridSearchCV\n","from scipy.stats import uniform\n","import numpy as np\n","\n","# List of hyperparameter\n","max_depth = [int(x) for x in np.linspace(1, 110, num = 30)] # Maximum number of levels in tree\n","min_samples_split = [2, 5, 10, 100] # Minimum number of samples required to split a node\n","min_samples_leaf = [1, 2, 4, 10, 20, 50] # Minimum number of samples required at each leaf node\n","max_features = ['auto', 'sqrt'] # Number of features to consider at every split\n","criterion = ['gini','entropy']\n","splitter = ['best','random']\n","\n","hyperparameters = dict(max_depth=max_depth,\n","                       min_samples_split=min_samples_split,\n","                       min_samples_leaf=min_samples_leaf,\n","                       max_features=max_features,\n","                       criterion=criterion,\n","                       splitter=splitter\n","                      )\n","\n","# Inisialisasi Model\n","dt = DecisionTreeClassifier(random_state=42)\n","model = GridSearchCV(dt, hyperparameters, cv=5, scoring='precision')\n","model.fit(X_train, y_train)\n","\n","# Predict & Evaluation\n","y_pred = model.predict(X_test)#Check performa dari model\n","eval_classification(model)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sK-kXdmoyO6U","executionInfo":{"status":"ok","timestamp":1664683138291,"user_tz":-420,"elapsed":897517,"user":{"displayName":"Rezki Trianto","userId":"01079108557219378407"}},"outputId":"d611562f-d009-4a0c-9acc-7ae3492699c9"},"id":"sK-kXdmoyO6U","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy (Test Set): 0.86\n","Precision (Test Set): 0.91\n","Recall (Test Set): 0.67\n","F1-Score (Test Set): 0.77\n","roc_auc (test-proba): 0.82\n","roc_auc (train-proba): 0.93\n","roc_auc (crossval train): 0.64105772005772\n","roc_auc (crossval test): 0.5853386809269161\n"]}]},{"cell_type":"markdown","source":["### Feature Importance"],"metadata":{"id":"XkOnGwBwy4jH"},"id":"XkOnGwBwy4jH"},{"cell_type":"code","source":["show_feature_importance(model.best_estimator_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":513},"id":"GaAwGgisy6nb","executionInfo":{"status":"ok","timestamp":1664683169168,"user_tz":-420,"elapsed":1847,"user":{"displayName":"Rezki Trianto","userId":"01079108557219378407"}},"outputId":"ad283ea9-9bf5-49ad-f582-b734607f1a87"},"id":"GaAwGgisy6nb","execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 720x576 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.8"},"latex_envs":{"LaTeX_envs_menu_present":true,"autoclose":false,"autocomplete":true,"bibliofile":"biblio.bib","cite_by":"apalike","current_citInitial":1,"eqLabelWithNumbers":true,"eqNumInitial":1,"hotkeys":{"equation":"Ctrl-E","itemize":"Ctrl-I"},"labels_anchors":false,"latex_user_defs":false,"report_style_numbering":false,"user_envs_cfg":false},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":true,"sideBar":true,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{"height":"calc(100% - 180px)","left":"10px","top":"150px","width":"165px"},"toc_section_display":true,"toc_window_display":true},"colab":{"provenance":[{"file_id":"1du_Pa6SQk1AjMzAXGlzPE2pcQJreVh6K","timestamp":1664680421471},{"file_id":"1kx0shQAoiRHjqUcuYzrcGLeh60UyKhb2","timestamp":1663393024703}],"toc_visible":true}},"nbformat":4,"nbformat_minor":5}