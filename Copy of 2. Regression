{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1eFXys8HZmokCRjmpmxkmAflUUN1ZNrCJ","timestamp":1664678323517}],"toc_visible":true,"collapsed_sections":["AMAMHUMzhhWX","8Pa8Pcm9SmxC","doZJjAQUh5fn","LxeFH-Dei4LW","Z7i-2zS0jde1","0SFTLi18jfbl","KHD1A5AYjhim"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Supervised Learning - Regression"],"metadata":{"id":"7dZdKMnaggLC"}},{"cell_type":"markdown","source":["# Preparation\n","Download dataset"],"metadata":{"id":"AG1keOvJgjtQ"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"brLNbUt2tZs1","executionInfo":{"status":"ok","timestamp":1714180737236,"user_tz":-420,"elapsed":3104,"user":{"displayName":"Rezki Trianto","userId":"01079108557219378407"}},"outputId":"b2136cdb-a919-46f6-d110-f093f5068781"},"outputs":[{"output_type":"stream","name":"stdout","text":["/usr/local/lib/python3.10/dist-packages/gdown/__main__.py:132: FutureWarning: Option `--id` was deprecated in version 4.3.1 and will be removed in 5.0. You don't need to pass it anymore to use a file ID.\n","  warnings.warn(\n","Downloading...\n","From: https://drive.google.com/uc?id=1EUw1Sq7KaX-x6BAMEJ3Pep_fqlncaywf\n","To: /content/kc_house_data.csv\n","100% 2.52M/2.52M [00:00<00:00, 112MB/s]\n"]}],"source":["!gdown --id 1EUw1Sq7KaX-x6BAMEJ3Pep_fqlncaywf # Download File"]},{"cell_type":"markdown","source":["## Import Libraries"],"metadata":{"id":"WET3vrrAgoxB"}},{"cell_type":"code","source":["import warnings\n","warnings.filterwarnings('ignore')"],"metadata":{"id":"fFV04cegipiq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","df = pd.read_csv('kc_house_data.csv')\n","# df.head()\n","\n","# X = df[['bedrooms','bathrooms']]\n","X = df.drop(columns=['id','date', 'price'])\n","y = df[['price']]\n","\n","from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)"],"metadata":{"id":"OUe-6z7btetx"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Preprocessing Sample (Standardize)"],"metadata":{"id":"lPuJMy44gr2Q"}},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler\n","ss = StandardScaler()\n","\n","numerical_features = X.columns.to_list()\n","for n in numerical_features:\n","  scaler = ss.fit(X_train[[n]])\n","  X_train[n] = scaler.transform(X_train[[n]])\n","  X_test[n] = scaler.transform(X_test[[n]])\n","  # scaler.to_pickle(filename)"],"metadata":{"id":"GR2WtlSHHVzY"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Modeling"],"metadata":{"id":"xlUxQW3lgv7g"}},{"cell_type":"markdown","source":["## Train Linear Regression"],"metadata":{"id":"AMAMHUMzhhWX"}},{"cell_type":"code","source":["# Train linear regression\n","from sklearn.linear_model import LinearRegression\n","regressor = LinearRegression()\n","regressor.fit(X_train, y_train)\n","\n","y_pred = regressor.predict(X_test)\n","## evaluation"],"metadata":{"id":"UKD6qiwwJF7h"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_train.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cODGD3-SphQx","executionInfo":{"status":"ok","timestamp":1714180753039,"user_tz":-420,"elapsed":3,"user":{"displayName":"Rezki Trianto","userId":"01079108557219378407"}},"outputId":"bb374eff-8be3-43f1-9ccd-91957569bfb2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Index: 15129 entries, 167 to 15795\n","Data columns (total 18 columns):\n"," #   Column         Non-Null Count  Dtype  \n","---  ------         --------------  -----  \n"," 0   bedrooms       15129 non-null  float64\n"," 1   bathrooms      15129 non-null  float64\n"," 2   sqft_living    15129 non-null  float64\n"," 3   sqft_lot       15129 non-null  float64\n"," 4   floors         15129 non-null  float64\n"," 5   waterfront     15129 non-null  float64\n"," 6   view           15129 non-null  float64\n"," 7   condition      15129 non-null  float64\n"," 8   grade          15129 non-null  float64\n"," 9   sqft_above     15129 non-null  float64\n"," 10  sqft_basement  15129 non-null  float64\n"," 11  yr_built       15129 non-null  float64\n"," 12  yr_renovated   15129 non-null  float64\n"," 13  zipcode        15129 non-null  float64\n"," 14  lat            15129 non-null  float64\n"," 15  long           15129 non-null  float64\n"," 16  sqft_living15  15129 non-null  float64\n"," 17  sqft_lot15     15129 non-null  float64\n","dtypes: float64(18)\n","memory usage: 2.2 MB\n"]}]},{"cell_type":"code","source":["print(regressor.intercept_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oyyiaipkpT69","executionInfo":{"status":"ok","timestamp":1714180755182,"user_tz":-420,"elapsed":3,"user":{"displayName":"Rezki Trianto","userId":"01079108557219378407"}},"outputId":"4d133b35-c3f5-41ec-88f0-dacaf8de5e77"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[537640.17317734]\n"]}]},{"cell_type":"markdown","source":["### Evaluate Linear Regression"],"metadata":{"id":"VN_hU2rrgyco"}},{"cell_type":"code","source":["from sklearn.metrics import mean_absolute_error, mean_squared_error, mean_absolute_percentage_error, r2_score\n","print('RMSE (test): ' + str(mean_squared_error(y_test, y_pred, squared=False)))\n","print('MAPE (test): ' + str(mean_absolute_percentage_error(y_test, y_pred)))\n","print('r2 (test): ' + str(r2_score(y_test, y_pred)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0EQk77_-La13","executionInfo":{"status":"ok","timestamp":1714180756392,"user_tz":-420,"elapsed":483,"user":{"displayName":"Rezki Trianto","userId":"01079108557219378407"}},"outputId":"7b7da825-8798-4b38-e32d-4ad41c242ed8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["RMSE (test): 208296.7277211889\n","MAPE (test): 0.253044843464385\n","r2 (test): 0.6994627057969898\n"]}]},{"cell_type":"markdown","source":["### Linear Regression Coefficient\n","Coefficient could be interpret as feature importance in linear regression"],"metadata":{"id":"UTbjjIcag1a6"}},{"cell_type":"code","source":["regressor.coef_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nkqrpFVbMFER","executionInfo":{"status":"ok","timestamp":1664677917896,"user_tz":-420,"elapsed":2,"user":{"displayName":"Rezki Trianto","userId":"01079108557219378407"}},"outputId":"4a06ab00-c062-4687-f118-4a2d5cbdc230"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[-32038.4549712 ,  30879.9319924 ,  82890.72488438,\n","          3911.75686088,   2862.84132154,  45577.06758803,\n","         41864.25566919,  15074.52116974, 111376.78757243,\n","         77186.57689502,  26696.151391  , -76180.09684416,\n","          8706.51196264, -29679.36861698,  82473.12236036,\n","        -27549.74187729,  11080.64906506,  -9023.43362975]])"]},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","source":["### Check overfit / underfit"],"metadata":{"id":"J9qX54gyMp0x"}},{"cell_type":"code","source":["from sklearn.metrics import mean_absolute_error, mean_squared_error, mean_absolute_percentage_error, r2_score\n","from sklearn.model_selection import cross_validate\n","\n","def eval_regression(model):\n","  y_pred = model.predict(X_test)\n","  y_pred_train = model.predict(X_train)\n","\n","  print('RMSE (test): ' + str(mean_squared_error(y_test, y_pred, squared=False)))\n","  print('RMSE (train): ' + str(mean_squared_error(y_train, y_pred_train, squared=False)))\n","\n","  print('MAPE (test): ' + str(mean_absolute_percentage_error(y_test, y_pred)))\n","  print('MAPE (train): ' + str(mean_absolute_percentage_error(y_train, y_pred_train)))\n","\n","  print('r2 (test): ' + str(r2_score(y_test, y_pred)))\n","  print('r2 (train): ' + str(r2_score(y_train, y_pred_train)))\n","\n","  # k-fold cross validation\n","  score = cross_validate(model, X, y, cv=5, scoring='r2', return_train_score=True)\n","  print('r2 (cross-val test): ' + str(score['test_score'].mean()))\n","  print('r2 (cross-val train): ' + str(score['train_score'].mean()))\n","\n","eval_regression(regressor)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SYmTPmnHMX34","executionInfo":{"status":"ok","timestamp":1664677979812,"user_tz":-420,"elapsed":3,"user":{"displayName":"Rezki Trianto","userId":"01079108557219378407"}},"outputId":"b00805ee-6211-4f43-aca2-44d59d9957f6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["RMSE (test): 208296.7277211889\n","RMSE (train): 198133.9442536269\n","MAPE (test): 0.25304484346438505\n","MAPE (train): 0.2544052061162715\n","r2 (test): 0.6994627057969898\n","r2 (train): 0.6995155846436756\n","r2 (cross-val test): 0.6945908283283543\n","r2 (cross-val train): 0.7002121455769496\n"]}]},{"cell_type":"markdown","source":["R2 antara data train dan test tidak jauh. model tidak overfit"],"metadata":{"id":"sNWc33CyhwGN"}},{"cell_type":"markdown","source":["## Regularization: Ridge Regression"],"metadata":{"id":"8Pa8Pcm9SmxC"}},{"cell_type":"code","source":["from sklearn.linear_model import Ridge\n","ridge = Ridge()\n","ridge.fit(X_train, y_train)\n","eval_regression(ridge)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4dC2BVCqODsi","executionInfo":{"status":"ok","timestamp":1664677987051,"user_tz":-420,"elapsed":693,"user":{"displayName":"Rezki Trianto","userId":"01079108557219378407"}},"outputId":"a8d93f05-6799-4918-eaf3-1a620e9f4187"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["RMSE (test): 208297.15682452894\n","RMSE (train): 198133.94497818153\n","MAPE (test): 0.25303721759110903\n","MAPE (train): 0.25439662893576853\n","r2 (test): 0.6994614675472006\n","r2 (train): 0.6995155824459969\n","r2 (cross-val test): 0.6945962843967507\n","r2 (cross-val train): 0.7002101388236811\n"]}]},{"cell_type":"markdown","source":["*Performanya tidak bertambah karena model awal tidak overfitting*"],"metadata":{"id":"Qt0kKr2phr51"}},{"cell_type":"markdown","source":["### Hyperparameter Tuning - Ridge\n","Hyperparameter yang biasa di tuning pada Ridge Regression: https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.Ridge.html\n","\n","\n","\n","*   alpha: nilai/koefisien regularization\n","*   solver: metode bagaimana kita melakukan update pada variable di ridge regression (slope/intercept): sag/saga lebih cocok jika data dalam jumlah besar\n","    *   {‘auto’, ‘svd’, ‘cholesky’, ‘lsqr’, ‘sparse_cg’, ‘sag’, ‘saga’}\n","\n","\n","\n"],"metadata":{"id":"nvPD-0YEYUWQ"}},{"cell_type":"code","source":["from sklearn.model_selection import RandomizedSearchCV, GridSearchCV\n","\n","alpha = [0.001, 0.01]\n","solver = ['auto', 'cholesky', 'lsqr']\n","hyperparameters = dict(alpha=alpha, solver=solver)\n","\n","from sklearn.linear_model import Ridge\n","ridge = Ridge()\n","rs = RandomizedSearchCV(ridge, hyperparameters, scoring='r2', cv=5, random_state=42)\n","rs.fit(X_train, y_train)\n","eval_regression(rs)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nz5SuSKfTFqz","executionInfo":{"status":"ok","timestamp":1664678021570,"user_tz":-420,"elapsed":3346,"user":{"displayName":"Rezki Trianto","userId":"01079108557219378407"}},"outputId":"11d1add1-dffa-4a58-fcb5-de85999eb09d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["RMSE (test): 208302.5202324864\n","RMSE (train): 198135.41056298092\n","MAPE (test): 0.2529685388011108\n","MAPE (train): 0.25435531947499534\n","r2 (test): 0.699445990317137\n","r2 (train): 0.699511137099455\n","r2 (cross-val test): 0.6945905841820403\n","r2 (cross-val train): 0.7002121454200836\n"]}]},{"cell_type":"markdown","source":["*Performanya tidak bertambah karena model awal tidak overfitting*"],"metadata":{"id":"u849PVNJiw-Y"}},{"cell_type":"markdown","source":["## Regularization - Lasso"],"metadata":{"id":"doZJjAQUh5fn"}},{"cell_type":"code","source":["from sklearn.linear_model import Lasso\n","lasso_model = Lasso()\n","lasso_model.fit(X_train, y_train)\n","eval_regression(lasso_model)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zBYCDuDYh8VC","executionInfo":{"status":"ok","timestamp":1664678027939,"user_tz":-420,"elapsed":2516,"user":{"displayName":"Rezki Trianto","userId":"01079108557219378407"}},"outputId":"ef2c6ae0-fe5f-4974-ad6c-2349eae950ac"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["RMSE (test): 208297.0431786377\n","RMSE (train): 198133.94435967132\n","MAPE (test): 0.25304446312605255\n","MAPE (train): 0.2544045136138414\n","r2 (test): 0.6994617954917639\n","r2 (train): 0.6995155843220275\n","r2 (cross-val test): 0.6945907597845122\n","r2 (cross-val train): 0.700212143265613\n"]}]},{"cell_type":"markdown","source":["*Performanya tidak bertambah karena model awal tidak overfitting*"],"metadata":{"id":"AAjpb_feiyIv"}},{"cell_type":"markdown","source":["### Hyperparameter Tuning - Lasso\n","<b>Hyperparameter yang biasa di tuning pada Lasso Regression:</b> https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.Lasso.html\n","- alpha: nilai/koefisien regularization\n","- solver: {‘cyclic’, ‘random’}"],"metadata":{"id":"Pb6wzT6th_1W"}},{"cell_type":"code","source":["from sklearn.model_selection import RandomizedSearchCV\n","from scipy.stats import uniform\n","\n","alpha = [0.02, 0.024, 0.025, 0.026, 0.03] # alpha or lambda\n","selection = ['cyclic', 'random']\n","hyperparameters = dict(alpha=alpha)\n","\n","from sklearn.linear_model import Lasso\n","lasso_model = Lasso()\n","clf = RandomizedSearchCV(lasso_model, hyperparameters, cv=5, random_state=42, scoring='r2')\n","\n","#Fitting Model\n","clf.fit(X_train, y_train)\n","eval_regression(clf)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kNXniUsNh_VJ","executionInfo":{"status":"ok","timestamp":1664678188875,"user_tz":-420,"elapsed":85162,"user":{"displayName":"Rezki Trianto","userId":"01079108557219378407"}},"outputId":"6d3ece01-c010-4599-98c4-21de527f3b1c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["RMSE (test): 208296.7340282672\n","RMSE (train): 198133.94425366932\n","MAPE (test): 0.2530448358576183\n","MAPE (train): 0.25440519226622277\n","r2 (test): 0.6994626875968739\n","r2 (train): 0.699515584643547\n","r2 (cross-val test): 0.6945908212257741\n","r2 (cross-val train): 0.7002121455757835\n"]}]},{"cell_type":"markdown","source":["*Performanya tidak bertambah karena model awal tidak overfitting*"],"metadata":{"id":"RA5jntOSizUF"}},{"cell_type":"markdown","source":["## Regularization - Elastic Net"],"metadata":{"id":"LxeFH-Dei4LW"}},{"cell_type":"code","source":["from sklearn.linear_model import ElasticNet\n","elasticnet_model = ElasticNet()\n","elasticnet_model.fit(X_train, y_train)\n","eval_regression(elasticnet_model)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Baxc9HM7i3qT","executionInfo":{"status":"ok","timestamp":1664678192726,"user_tz":-420,"elapsed":3854,"user":{"displayName":"Rezki Trianto","userId":"01079108557219378407"}},"outputId":"48001b5d-8f1f-4d04-f8ed-cd833f8232d9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["RMSE (test): 220530.56256577015\n","RMSE (train): 208358.60493933616\n","MAPE (test): 0.24397698969804085\n","MAPE (train): 0.2437392712920618\n","r2 (test): 0.6631232427080052\n","r2 (train): 0.6677025076875247\n","r2 (cross-val test): 0.6133638597405909\n","r2 (cross-val train): 0.6206863574321763\n"]}]},{"cell_type":"markdown","source":["### Hyperparameter Tuning - Elastic Net\n","<b>Hyperparameter yang biasa di tuning pada Elastic Net:</b> https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.ElasticNet.html\n","- alpha: nilai/koefisien regularization\n","- solver: {‘cyclic’, ‘random’}\n","- l1_ratio: rasio dari penggunaan l1 norm (lasso). default: 0.5\n","    - jika l1_ratio == 1, maka sepenuhnya menggunakan l1 norm\n","    - jika l2_ratio == 0, maka sepenuhnya menggunakan l2 norm"],"metadata":{"id":"pj0dMJtMjGqv"}},{"cell_type":"code","source":["from sklearn.model_selection import RandomizedSearchCV\n","from scipy.stats import uniform\n","import numpy as np\n","\n","alpha = [1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 0.0, 1.0, 10.0, 100.0]\n","l1_ratio = np.arange(0, 1, 0.01)\n","hyperparameters = dict(alpha=alpha, l1_ratio=l1_ratio, normalize=[True,False])\n","\n","from sklearn.linear_model import ElasticNet\n","elasticnet_model = ElasticNet()\n","clf = RandomizedSearchCV(elasticnet_model, hyperparameters, cv=5, random_state=42, scoring='r2')\n","clf.fit(X_train, y_train)\n","eval_regression(clf)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y_j9EsVVjOZG","executionInfo":{"status":"ok","timestamp":1664678285063,"user_tz":-420,"elapsed":88200,"user":{"displayName":"Rezki Trianto","userId":"01079108557219378407"}},"outputId":"af1f745d-d7a3-4a07-aea6-c26b2294f680"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["RMSE (test): 208296.75676418658\n","RMSE (train): 198133.94425984254\n","MAPE (test): 0.25304489878981634\n","MAPE (train): 0.2544051997980459\n","r2 (test): 0.6994626219886204\n","r2 (train): 0.6995155846248227\n","r2 (cross-val test): 0.6945888887495796\n","r2 (cross-val train): 0.7002121381027815\n"]}]},{"cell_type":"markdown","source":["# Non Linear Algorithm"],"metadata":{"id":"z7RwgcgCadD_"}},{"cell_type":"markdown","source":["## Decision Tree"],"metadata":{"id":"Z7i-2zS0jde1"}},{"cell_type":"code","source":["from sklearn.tree import DecisionTreeRegressor\n","dt = DecisionTreeRegressor()\n","dt.fit(X_train, y_train)\n","eval_regression(dt)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Uai5qTiYZUit","executionInfo":{"status":"ok","timestamp":1664155804110,"user_tz":-420,"elapsed":984,"user":{"displayName":"Rezki Trianto","userId":"01079108557219378407"}},"outputId":"46d4d786-e91f-463c-f97d-ba9bee40df43"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["RMSE (test): 190005.01098487418\n","RMSE (train): 9137.180211708137\n","MAPE (test): 0.18546312963298606\n","MAPE (train): 0.0026706988322656227\n","r2 (test): 0.7499288526209498\n","r2 (train): 0.9993609592350591\n"]}]},{"cell_type":"markdown","source":["## Random Forest"],"metadata":{"id":"0SFTLi18jfbl"}},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestRegressor\n","rf = RandomForestRegressor()\n","rf.fit(X_train, y_train)\n","eval_regression(rf)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4cLa0EHdalpD","executionInfo":{"status":"ok","timestamp":1664155976857,"user_tz":-420,"elapsed":17017,"user":{"displayName":"Rezki Trianto","userId":"01079108557219378407"}},"outputId":"61686c51-d4df-4c7a-ace7-22bf8726eb18"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:3: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  This is separate from the ipykernel package so we can avoid doing imports until\n"]},{"output_type":"stream","name":"stdout","text":["RMSE (test): 145557.25051188594\n","RMSE (train): 47912.78440270144\n","MAPE (test): 0.13528251037221714\n","MAPE (train): 0.04963933520146909\n","r2 (test): 0.8532422096565957\n","r2 (train): 0.9824285742250736\n"]}]},{"cell_type":"markdown","source":["## Support Vector Regressor"],"metadata":{"id":"KHD1A5AYjhim"}},{"cell_type":"code","source":["from sklearn.svm import SVR\n","svr = SVR()\n","svr.fit(X_train, y_train)\n","eval_regression(svr)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a0HTZJqXbL7b","executionInfo":{"status":"ok","timestamp":1664156024854,"user_tz":-420,"elapsed":41260,"user":{"displayName":"Rezki Trianto","userId":"01079108557219378407"}},"outputId":"e60cc4c7-b206-4971-ea45-06bb3031fd03"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:993: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"]},{"output_type":"stream","name":"stdout","text":["RMSE (test): 391421.85783274577\n","RMSE (train): 371482.2175986222\n","MAPE (test): 0.4247506825633978\n","MAPE (train): 0.4239883151875342\n","r2 (test): -0.061264471033486645\n","r2 (train): -0.056282879890371174\n"]}]},{"cell_type":"markdown","source":["An R2 of 0 means your regression is no better than taking the mean value, i.e. you are not using any information from the other variables. A Negative R2 means you are doing worse than the mean value."],"metadata":{"id":"QSIJ5K7cjbgu"}},{"cell_type":"code","source":[],"metadata":{"id":"T-ZAfUcSbRs8"},"execution_count":null,"outputs":[]}]}